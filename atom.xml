<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://isuperqiang.cn</id>
    <title>落英坠露</title>
    <updated>2019-06-30T11:50:50.840Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://isuperqiang.cn"/>
    <link rel="self" href="https://isuperqiang.cn/atom.xml"/>
    <subtitle>生活不止眼前的苟且，还有诗和远方的田野。</subtitle>
    <logo>https://isuperqiang.cn/images/avatar.png</logo>
    <icon>https://isuperqiang.cn/favicon.ico</icon>
    <rights>All rights reserved 2019, 落英坠露</rights>
    <entry>
        <title type="html"><![CDATA[每周 ARTS 第 13 期]]></title>
        <id>https://isuperqiang.cn/post/mei-zhou-arts-di-13-qi</id>
        <link href="https://isuperqiang.cn/post/mei-zhou-arts-di-13-qi">
        </link>
        <updated>2019-06-30T11:50:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-algorithm">1. Algorithm</h2>
<h4 id="242-有效的字母异位词简单">242. 有效的字母异位词（简单）</h4>
<h5 id="描述">描述：</h5>
<blockquote>
<p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p>
</blockquote>
<h5 id="示例">示例：</h5>
<pre><code>输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;
输出: true
</code></pre>
<h5 id="思路">思路：</h5>
<p>统计 s 中每个字母出现的次数，遍历 t 中的字母减去相应的次数。如果次数小于 0，那么认为是 false。</p>
<pre><code class="language-java">class Solution {
    public boolean isAnagram(String s, String t) {
        if (s == null || t == null || s.length() != t.length()) {
            return false;
        }

        int[] counter = new int[26];
        for (int i = 0, size = s.length(); i &lt; size; i++) {
            counter[s.charAt(i) - 'a']++;
        }
        for (int i = 0, size = t.length(); i &lt; size; i++) {
            char c = t.charAt(i);
            counter[c - 'a']--;
            if (counter[c - 'a'] &lt; 0) {
                return false;
            }
        }
        return true;
    }
}
</code></pre>
<h5 id="分析">分析：</h5>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(1)</li>
</ul>
<hr>
<h2 id="2-review">2. Review</h2>
<p><a href="https://medium.com/devtrailsio/how-to-become-a-better-software-developer-dd16072c974e">How to Become a Better Software Developer</a> 如何成为更好的软件开发者</p>
<p>作者分享了一些提升技能和高效工作的方法，这里简单列举几条：</p>
<ul>
<li>从端到端理解流程。程序员不要低头写代码，应该关注软件开发的其他方面，比如产品、设计、测试等。</li>
<li>理解客户的需求。客户不懂技术，我们要赢得客户的信任，多站在客户的角度考虑。</li>
<li>为工作选择正确的工具。不要限制自己思维，要提出不同的方案。尝试新事物时，要注意到安全性。</li>
<li>站在巨人的肩膀上。不要重复造轮子，但是可以通过重新实现来学习。</li>
<li>关心自己如何工作。提升个人和团队的研发效能，比如完善的工作流程、项目计划等。</li>
<li>专注于基础。IT 行业瞬息万变，新框架层出不穷，唯有基础知识是一成不变的。</li>
<li>其他的经验：积极分享知识，不要指责自己和他人，不要做刺头。</li>
</ul>
<h2 id="3-tip">3. Tip</h2>
<p>最近在读《Java并发编程实战》，里面讲了一些线程安全的技巧和概念，比如原子性、可见性、不可变对象。线程安全的核心在于对共享和可变的对象进行访问控制，采用同步机制（synchronized），同步的代码块保持精细。不可变对象一定是线程安全的，比如 String。加锁机制可以确保可见性和原子性，而 volatile 只能保证可见性。</p>
<h2 id="4-share">4. Share</h2>
<p>19 年过半，我发现有些目标做到一半就停止了，执行力还需要提高。计划-执行-坚持。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每周 ARTS 第 12 期]]></title>
        <id>https://isuperqiang.cn/post/mei-zhou-arts-di-12-qi</id>
        <link href="https://isuperqiang.cn/post/mei-zhou-arts-di-12-qi">
        </link>
        <updated>2019-06-23T13:53:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-algorithm">1. Algorithm</h2>
<h3 id="108-将有序数组转换为二叉搜索树简单">108. 将有序数组转换为二叉搜索树（简单）</h3>
<h5 id="描述">描述：</h5>
<blockquote>
<p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。本题中，一个高度平衡二叉树是指一个二叉树每个节点的左右两个子树的高度差的绝对值不超过 1。</p>
</blockquote>
<h5 id="示例">示例：</h5>
<pre><code>给定有序数组: [-10,-3,0,5,9],
一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：

      0
     / \
   -3   9
   /   /
 -10  5
</code></pre>
<h5 id="思路">思路：</h5>
<p>以数组的中间元素为根节点，将数组分为左右两部分，用递归的方法对两个子数组分别构建左右子树。</p>
<pre><code class="language-java">class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums == null || nums.length == 0) {
            return null;
        }
        return toBst(nums, 0, nums.length - 1);
    }

    private TreeNode toBst(int[] nums, int l, int r) {
        if (l &gt; r) {
            return null;
        }
        int mid = l + (r - l) / 2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = toBst(nums, l, mid - 1);
        root.right = toBst(nums, mid + 1, r);
        return root;
    }
}
</code></pre>
<h5 id="分析">分析：</h5>
<ul>
<li>时间复杂度：O(logn)</li>
<li>空间复杂度：O(1)</li>
</ul>
<hr>
<h2 id="2-review">2. Review</h2>
<p><a href="https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80">TDD Changed My Life</a> TDD 改变了我的人生</p>
<p>TDD 是测试驱动开发，先写测试用例，再写实现代码。作者讲了一个切身的经历，debug 到奔溃也没有发现问题。如果提前写好单元测试，就能及早发现这个 bug。软件开发就是模块的组装，单元测试针对某个功能，每个部件都通过验证，那么整个系统也得到保证。</p>
<h2 id="3-tip">3. Tip</h2>
<p><a href="https://isuperqiang.cn/post/java-bi-jiao-fu-dian-shu-de-zheng-que-fang-shi/">Java 比较浮点数的正确方式</a> 重新认识了浮点数，解决了以前踩过的坑。</p>
<h2 id="4-share">4. Share</h2>
<p>一本书不读完，坚决不碰下一本。最近读书一直虎头蛇尾，看到一半就停下来看其他的。碎片化的生活，耐心越来越稀缺，我想静下心来，踏踏实实做下去。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 比较浮点数的正确方式]]></title>
        <id>https://isuperqiang.cn/post/java-bi-jiao-fu-dian-shu-de-zheng-que-fang-shi</id>
        <link href="https://isuperqiang.cn/post/java-bi-jiao-fu-dian-shu-de-zheng-que-fang-shi">
        </link>
        <updated>2019-06-23T04:02:17.000Z</updated>
        <summary type="html"><![CDATA[<p>今天在读《Java开发手册》时，看到浮点数的等值判断问题「浮点数的基本数据类型不能用 <code>==</code> 比较，包装数据类型不能用 <code>equals</code> 比较」。以前开发时也遇到过浮点数的坑，所以就想一探究竟。</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天在读《Java开发手册》时，看到浮点数的等值判断问题「浮点数的基本数据类型不能用 <code>==</code> 比较，包装数据类型不能用 <code>equals</code> 比较」。以前开发时也遇到过浮点数的坑，所以就想一探究竟。</p>
<!-- more -->
<h3 id="1-浮点数表示">1. 浮点数表示</h3>
<p>在计算机系统理论中，浮点数采用 IEEE 754 标准表示，编码方式是符号+阶码+尾数，如图：</p>
<p><img src="https://richie-storage.oss-cn-hangzhou.aliyuncs.com/img/1820210-61af804d90504fc0.webp" alt="浮点数表示"></p>
<p>比如 float 类型占用 32 位，单精度浮点表示法：</p>
<ul>
<li>符号位（sign）占用 1 位，用来表示正负数，0 表示正数，1 表示负数</li>
<li>指数位（exponent）占用 8 位，用来表示指数，实际要加上偏移量</li>
<li>小数位（fraction）占用 23 位，用来表示小数，不足位数补 0</li>
</ul>
<p>从这里可以看出，指数位决定了大小范围，小数位决定了计算精度。当十进制数值转换为二进制科学表达式后，得到的尾数位数是有可能很长甚至是无限长。所以当使用浮点格式来存储数字的时候，实际存储的尾数是被截取或执行舍入后的近似值。这就解释了浮点数计算不准确的问题，因为近似值和原值是有差异的。</p>
<p>更详细的介绍可以查阅 <a href="https://www.zhihu.com/question/46432979/answer/221485161">java浮点类型float和double的主要区别，它们的小数精度范围大小是多少？ - Boss呱呱的回答 - 知乎</a>。</p>
<h3 id="2-比较浮点数的方式">2. 比较浮点数的方式</h3>
<p>让我们来验证一下比较浮点数的几种方式。</p>
<h4 id="1-操作符">1. <code>==</code> 操作符</h4>
<p>比较两个浮点数，一个从零开始加 11 次 0.1，另一个用 0.1 乘以 11 计算。然后用 <code>==</code> 比较大小。</p>
<pre><code class="language-java">    private void compareByOperator() {
        float f1 = 0.0f;
        for (int i = 0; i &lt; 11; i++) {
            f1 += 0.1f;
        }

        float f2 = 0.1f * 11;

        System.out.println(&quot;f1 = &quot; + f1);
        System.out.println(&quot;f2 = &quot; + f2);

        if (f1 == f2) {
            System.out.println(&quot;f1 and f2 are equal using operator ==&quot;);
        } else {
            System.out.println(&quot;f1 and f2 are not equal using operator ==&quot;);
        }
    }
</code></pre>
<p>运行输出：</p>
<pre><code>f1 = 1.1000001
f2 = 1.1
f1 and f2 are not equal
</code></pre>
<p>可以看到，两个浮点数不相等，所以通过 <code>==</code> 来比较浮点数是不可靠的。</p>
<h4 id="2-误差范围">2. 误差范围</h4>
<p>指定一个误差范围，两个浮点数的差值在范围之内，则认为是相等的。使用 <code>Math.abs()</code> 计算差值，然后和阈值比较。</p>
<pre><code class="language-java">    private void compareByThreshold() {
        final float THRESHOLD = 0.000001;
        float f1 = 0.0f;
        for (int i = 0; i &lt; 11; i++) {
            f1 += 0.1f;
        }

        float f2 = 0.1f * 11;

        System.out.println(&quot;f1 = &quot; + f1);
        System.out.println(&quot;f2 = &quot; + f2);

        if (Math.abs(f1 - f2) &lt; THRESHOLD) {
            System.out.println(&quot;f1 and f2 are equal using threshold&quot;);
        } else {
            System.out.println(&quot;f1 and f2 are not equal using threshold&quot;);
        }
    }
</code></pre>
<p>运行输出：</p>
<pre><code>f1 = 1.1000001
f2 = 1.1
f1 and f2 are equal using threshold
</code></pre>
<h4 id="3-使用-bigdecimal">3. 使用 <code>BigDecimal</code></h4>
<p><code>BigDecimal</code> 是不可变的，能够精确地表示十进制数字。需要注意的是，创建 <code>BigDecimal</code> 对象时，要使用参数为 <code>String</code> 的构造方法，不要使用构造参数为 <code>double</code> 的，如果非要使用 <code>double</code> 创建，一定要用 <code>valueOf</code> 静态方法，防止丢失精度。然后调用 <code>compareTo</code> 方法比较即可。</p>
<pre><code class="language-java">    private void compareByBigDecimal() {
        BigDecimal f1 = new BigDecimal(&quot;0.0&quot;);
        BigDecimal pointOne = new BigDecimal(&quot;0.1&quot;);
        for (int i = 0; i &lt; 11; i++) {
            f1 = f1.add(pointOne);
        }

        BigDecimal f2 = new BigDecimal(&quot;0.1&quot;);
        BigDecimal eleven = new BigDecimal(&quot;11&quot;);
        f2 = f2.multiply(eleven);

        System.out.println(&quot;f1 = &quot; + f1);
        System.out.println(&quot;f2 = &quot; + f2);

        if (f1.compareTo(f2) == 0) {
            System.out.println(&quot;f1 and f2 are equal using BigDecimal&quot;);
        } else {
            System.out.println(&quot;f1 and f2 are not equal using BigDecimal&quot;);
        }
    }
</code></pre>
<p>运行输出：</p>
<pre><code>f1 = 1.1
f2 = 1.1
f1 and f2 are equal using BigDecimal
</code></pre>
<h3 id="3-结论">3. 结论</h3>
<p>使用 <code>==</code> 比较浮点数不准确，可以采用误差范围近似相等，或者 <code>BigDecimal</code> 计算比较。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每周 ARTS 第 11 期]]></title>
        <id>https://isuperqiang.cn/post/mei-zhou-arts-di-11-qi</id>
        <link href="https://isuperqiang.cn/post/mei-zhou-arts-di-11-qi">
        </link>
        <updated>2019-06-16T03:38:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-algorithm">1. Algorithm</h2>
<h3 id="263-丑数简单">263. 丑数（简单）</h3>
<h5 id="描述">描述：</h5>
<blockquote>
<p>编写一个程序判断给定的数是否为丑数。丑数就是只包含质因数 2, 3, 5 的正整数。</p>
</blockquote>
<h5 id="示例">示例：</h5>
<pre><code>示例：
输入: 6
输出: true
解释: 6 = 2 × 3
</code></pre>
<h5 id="思路">思路：</h5>
<ul>
<li>循环实现：循环去除 2、3、5，直到不能整除，如果余数是 1，那么就是丑数。</li>
<li>递归实现：和循环一样，也是不停地除2、3、5。</li>
</ul>
<pre><code class="language-java">class Solution {
    public boolean isUgly(int num) {
        if (num &lt;= 0) {
            return false;
        } else if (num == 1) {
            return true;
        }
        while (num % 2 == 0) {
            num /= 2;
        }
        while (num % 3 == 0) {
            num /= 3;
        }
        while (num % 5 == 0) {
            num /= 5;
        }
        return num == 1;
    }
  
   private static boolean isUgly2(int num) {
        if (num &lt;= 0) {
            return false;
        } else if (num == 1) {
            return true;
        }
        if (num % 2 == 0) {
            return isUgly2(num / 2);
        }
        if (num % 3 == 0) {
            return isUgly2(num / 3);
        }
        if (num % 5 == 0) {
            return isUgly2(num / 5);
        }
        return false;
    }
}
</code></pre>
<h5 id="分析">分析：</h5>
<p>循环和递归实现一样：</p>
<ul>
<li>时间复杂度：O(logn)</li>
<li>空间复杂度：O(1)</li>
</ul>
<hr>
<h3 id="349-两个数组的交集简单">349.  两个数组的交集（简单）</h3>
<h5 id="描述-2">描述：</h5>
<blockquote>
<p>给定两个数组，编写一个函数来计算它们的交集。</p>
</blockquote>
<h5 id="示例-2">示例：</h5>
<pre><code>输入: nums1 = [1,2,2,1], nums2 = [2,2]
输出: [2]
</code></pre>
<h5 id="说明">说明：</h5>
<ul>
<li>输出结果中的每个元素一定是唯一的。</li>
<li>我们可以不考虑输出结果的顺序。</li>
</ul>
<h5 id="思路-2">思路：</h5>
<p>使用一个 Set 去除数组一重复元素，另一个 Set 保存两个数组的交集</p>
<h5 id="解法">解法：</h5>
<pre><code class="language-java">class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        if (nums1 == null || nums2 == null) {
            return new int[]{};
        }

        Set&lt;Integer&gt; set1 = new HashSet&lt;&gt;(nums1.length);
        for (int i : nums1) {
            set1.add(i);
        }
        Set&lt;Integer&gt; set2 = new HashSet&lt;&gt;(nums1.length);
        for (int i : nums2) {
            if (set1.contains(i)) {
                set2.add(i);
            }
        }
        int size = set2.size();
        int[] ret = new int[size];
        Iterator&lt;Integer&gt; iterator = set2.iterator();
        for (int i = 0; i &lt; size; i++) {
            ret[i] = iterator.next();
        }
        return ret;
    }
}
</code></pre>
<h5 id="分析-2">分析：</h5>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(n)</li>
</ul>
<h2 id="2-review">2. Review</h2>
<p><a href="https://medium.com/free-code-camp/what-is-an-api-in-english-please-b880a3214a82">What is an API? In English, please.</a> 什么是 API？</p>
<p>开发者都知道 API 是应用程序接口，作者对它有更广泛的认识。API 是服务方的一部分，它接收请求并发出响应。API 是向客户提供服务的一种方式，客户端访问 API 获取消息，比如 GitHub 的 API。在面向对象编程中，对象的 public 方法也可以看作是一种 API，用来与其他对象进行交互。</p>
<h2 id="3-tip">3. Tip</h2>
<p><a href="https://isuperqiang.cn/post/android-io-na-xie-shi-er/">Android I/O 那些事儿</a> 总结了 Android 系统的 I/O 知识，对它有了更深层次的了解。</p>
<h2 id="4-share">4. Share</h2>
<p>经典是经过时间筛选的，在这个浮躁的社会，多读经典是最省时间的选择。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每周 ARTS 第 10 期]]></title>
        <id>https://isuperqiang.cn/post/mei-zhou-arts-di-10-qi</id>
        <link href="https://isuperqiang.cn/post/mei-zhou-arts-di-10-qi">
        </link>
        <updated>2019-06-09T03:37:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-algorithm">1. Algorithm</h2>
<h3 id="226-翻转二叉树简单">226. 翻转二叉树（简单）</h3>
<h5 id="描述">描述：</h5>
<blockquote>
<p>翻转一棵二叉树</p>
</blockquote>
<h5 id="示例">示例：</h5>
<pre><code>示例：
输入:
    4
  2    7
1  3  6  9
输出:
    4
  7    2
9  6  3  1
</code></pre>
<h5 id="思路">思路：</h5>
<ul>
<li>递归法：翻转一个二叉树，就是把根节点的左子树翻转一下，同样的把右子树翻转一下，再交换左右子树就可以了。</li>
<li>迭代法：类似广度优先遍历的方式，使用队列存储尚未交换的节点，每次从队列取出一个结点，交互其左右子结点，直到队列为空。</li>
</ul>
<pre><code class="language-java">class Solution {
    public TreeNode invertTreeRecursively(TreeNode root) {
        if (root == null) {
            return null;
        }

        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
        invertTreeRecursively(root.left);
        invertTreeRecursively(root.right);
        return root;
    }

    public TreeNode invertTreeIteratively(TreeNode root) {
        if (root == null) {
            return null;
        }

        LinkedList&lt;TreeNode&gt; list = new LinkedList&lt;&gt;();
        list.add(root);
        while (list.isEmpty()) {
            TreeNode current = list.poll();
            TreeNode temp = current.left;
            current.left = current.right;
            current.right = temp;

            if (current.left != null) {
                list.add(current.left);
            }
            if (current.right != null) {
                list.add(current.right);
            }
        }
        return root;
    }
}
</code></pre>
<h5 id="分析">分析：</h5>
<p>递归和迭代法一样：</p>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(n)</li>
</ul>
<hr>
<h3 id="326-3-的幂简单">326. 3 的幂（简单）</h3>
<h5 id="描述-2">描述：</h5>
<blockquote>
<p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。</p>
</blockquote>
<h5 id="示例-2">示例：</h5>
<pre><code>输入: 27
输出: true
</code></pre>
<h5 id="思路-2">思路：</h5>
<ul>
<li>解法一：累乘法</li>
<li>解法二：3的幂次质因子只有3，而整数范围内的3的幂次最大是1162261467</li>
</ul>
<h5 id="解法">解法：</h5>
<pre><code class="language-java">class Solution {
    public boolean isPowerOfThree(int n) {
        if (n &lt;= 0) {
            return false;
        }
        if (n == 1) {
            return true;
        }
        long m = 1;
        while (m &lt; n) {
            m *= 3;
            if (m == n) {
                return true;
            }
        }
        return false;
    }

    public boolean isPowerOfThree2(int n) {
        return n &gt; 0 &amp;&amp; 1162261467 % n == 0;
    }
}
</code></pre>
<h5 id="分析-2">分析：</h5>
<p>解法一：</p>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(1)</li>
</ul>
<p>解法二：</p>
<ul>
<li>时间复杂度：O(1)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h2 id="2-review">2. Review</h2>
<p><a href="https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53">Goodbye, Object Oriented Programming</a> 再见，面向对象编程</p>
<p>作者是个有着多年经验的老程序员，他毫不留情地指出了面向对象编程的问题，分别从封装、继承和多态这三大支柱来阐述。</p>
<ul>
<li>继承最大的好处就是复用。但是出现了「猴子香蕉丛林」问题，我只想要一根香蕉，得到的却是香蕉丛林。钻石问题，继承关系的结构图就像钻石一样，这样容易造成调用混乱。还有基类问题，子类不知道基类的实现，从而引发操作错误。解决办法就是用组合替代继承，原意是包含和委托。</li>
<li>封装使得对象保证内部的变量受保护，然而它却带来了一下问题。引用问题，给构造方法传参时，对象存在多个应用，这样对象就不安全了。解决办法是对象深拷贝，但不是所有对象都支持克隆。</li>
<li>面向对象编程不需要多态，它完全可以基于接口来实现。</li>
</ul>
<p>最后作者告别了面向对象编程，转向函数式编程。</p>
<p>虽然作者举出这么多 OOP 的问题，但是面向对象的思想依然非常流行。软件开发没有银弹，能够实现功能、解决问题的思想都是值得采用的。</p>
<h2 id="3-tip">3. Tip</h2>
<p>日常的琐事都用软件记录，比如有道云笔记、滴答清单、LastPass。大脑是用来思考的，不是用来记东西的，它充当的更多是 CPU 的角色，而不是硬盘。所以，让大脑轻松一下，用工具记录吧。</p>
<h2 id="4-share">4. Share</h2>
<p><a href="https://mp.weixin.qq.com/s/qodCngOPXGSaaBy2ULAgqg">关于线程和I/O模型的极简知识</a> 主要讲述了线程和 I/O 模型的演化历史，问题驱动模型的演化，每种模型都有各自的使用场景。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android I/O 那些事儿]]></title>
        <id>https://isuperqiang.cn/post/android-io-na-xie-shi-er</id>
        <link href="https://isuperqiang.cn/post/android-io-na-xie-shi-er">
        </link>
        <updated>2019-06-04T04:47:01.000Z</updated>
        <summary type="html"><![CDATA[<p>I/O 操作是编程离不开的话题，它不仅是读写那么简单，还涉及底层的文件系统和存储设备。I/O 的快慢影响程序的执行效率，这篇文章主要介绍 Android 平台 I/O 的方式和使用场景。</p>
]]></summary>
        <content type="html"><![CDATA[<p>I/O 操作是编程离不开的话题，它不仅是读写那么简单，还涉及底层的文件系统和存储设备。I/O 的快慢影响程序的执行效率，这篇文章主要介绍 Android 平台 I/O 的方式和使用场景。</p>
<!-- more -->
<h3 id="1-linux-io-的基本组成">1. Linux I/O 的基本组成</h3>
<p>众所周知，Android 基于 Linux 系统，先介绍一些 Linux 上 I/O 的知识。</p>
<p>I/O 操作由应用程序、文件系统和磁盘共同完成，应用程序将 I/O 命令发送给文件系统，文件系统在合适的时间把 I/O 指令发送给磁盘。I/O 的流程如下图：</p>
<p><img src="https://richie-storage.oss-cn-hangzhou.aliyuncs.com/img/20190603080604.png" alt="I/O操作"></p>
<p>CPU 和内存的速度比磁盘快得多，I/O 操作的瓶颈在于磁盘的性能。为了降低磁盘对应用程序的影响，文件系统要进行各种各样的优化。</p>
<h4 id="文件系统">文件系统</h4>
<p>简单来说，文件系统就是存储和组织数据的方式。应用程序调用 read() 方法，系统会通过中断从用户空间进入内核空间，然后经过虚拟文件系统、具体文件系统、页缓存。</p>
<p><img src="https://richie-storage.oss-cn-hangzhou.aliyuncs.com/img/20190603081904.png" alt="Linux-I/O架构"></p>
<ul>
<li>虚拟文件系统（VFS）。主要用于屏蔽具体的文件系统，为应用程序的操作提供一个统一的接口。</li>
<li>文件系统（File System）。ext4、F2FS 都是具体文件系统实现。每个文件系统都有适合自己的场景。</li>
<li>页缓存（Page Cache）。文件系统对数据的缓存，读文件时先检查页缓存，如果命中就不去读磁盘。</li>
</ul>
<h4 id="磁盘">磁盘</h4>
<p>磁盘指的是系统的存储设备，常见的有机械硬盘、固态硬盘等。如果发现应用程序要读的数据没有在页缓存中，这时候就需要真正向磁盘发起 I/O 请求。磁盘 I/O 的过程要先经过内核的通用块层、I/O 调度层、设备驱动层，最后才会交给具体的硬件设备处理。</p>
<p><img src="https://richie-storage.oss-cn-hangzhou.aliyuncs.com/img/20190603082924.png" alt="磁盘架构"></p>
<ul>
<li>通用块层。接收上层发出的磁盘请求，并最终发出 I/O 请求。它与 VPS 的作用类似。</li>
<li>I/O 调度层。根据设置的调度算法对请求合并和排序。不能接收到磁盘请求就立刻交给驱动层处理。</li>
<li>块设备驱动层。根据具体的物理设备，选择对应的驱动程序，通过操控硬件设备完成最终的 I/O 请求。</li>
</ul>
<h3 id="2-android-上的-io">2. Android 上的 I/O</h3>
<p>Android 现在普遍使用的是 Linux 常用的 ext4 文件系统。F2FS（Flash-Friendly File System）是三星为闪存研发的文件系统，它针对闪存进行了大量优化，F2FS 文件系统在小文件的随机读写方面比 ext4 更快。随着 Google、华为的投入和使用，F2FS 应该会成为 Android 主流的文件系统。</p>
<p>Android 手机使用闪存作为存储设备，也就是我们常说的 ROM。前几年闪存通常使用 eMMC 标准，近年来采用性能更好的 UFS 2.0/2.1 标准。手机存储也朝着体积更小、功耗更低、速度更快、容量更大的方向发展，闪存的随机读写速度甚至比 SSD 还快。</p>
<h4 id="手机变卡">手机变卡</h4>
<p>Android 手机用久了会变卡，除了系统升级、设备折旧等因素，还和 I/O 有密切关系。I/O 操作变慢的原因有下面几条：</p>
<ul>
<li>内存不足。系统回收 Page Cache 和 Buffer Cache 的内存，大部分的写操作会直接落盘，导致性能低下。</li>
<li>写入放大。闪存重复写入需要先进行擦除，一次写入会引起整个块数据的迁移，导致写入时间非常久。</li>
<li>设备性能差。在高负载的情况下容易出现瓶颈。</li>
</ul>
<h4 id="文件损坏">文件损坏</h4>
<p>文件损坏是令人头疼的问题，大多是由不正确的操作导致的。文件损坏的原因可以从应用程序、文件系统和磁盘三个角度来分析：</p>
<ul>
<li>应用程序。大部分的 I/O 方法都不是原子操作，文件的跨进程或者多线程写入、使用一个已经关闭的文件描述符 fd 来操作文件，都有可能导致数据被覆盖或者删除。</li>
<li>文件系统。虽说内核崩溃或者系统突然断电都有可能导致文件系统损坏，不过文件系统也做了很多的保护措施。例如 system 分区保证只读不可写，增加异常检查和恢复机制。</li>
<li>磁盘。手机上使用的闪存是电子式的存储设备，所以在资料传输过程可能会发生电子遗失等现象导致数据错误。</li>
</ul>
<h3 id="3-io-的三种方式">3. I/O 的三种方式</h3>
<p>I/O 有三种方式：标准 I/O、mmap 和 Direct I/O。</p>
<p><img src="https://richie-storage.oss-cn-hangzhou.aliyuncs.com/img/20190604090403.png" alt="I/O的方式"></p>
<h4 id="标准-io">标准 I/O</h4>
<p>应用程序平时用到 read/write 操作都属于标准 I/O，也就是缓存 I/O（Buffered I/O）。它的关键特性有：</p>
<ul>
<li>对于读操作，当应用程序读取某块数据时，如果这块数据已经在页缓存中，那么就不需要经过物理读盘操作。</li>
<li>对于写操作，应用程序会先将数据写到页缓存中去，不需要等全部数据被写回磁盘，系统会定期将页缓存中的数据刷到磁盘上。</li>
</ul>
<p>缓存 I/O 可以很大程度减少真正读写磁盘的次数，从而提升性能。但是延迟写机制可能会导致数据丢失。在实际应用中，如果某些数据非常重要，我们应该采用同步写机制。</p>
<p>读操作时，数据会先从磁盘拷贝到 Page Cache 中，然后再从 Page Cache 拷贝到应用程序的用户空间，这样就会多一次内存拷贝。内存相对磁盘是高速设备，即使多拷贝一次，也比真正读一次硬盘要快。</p>
<h4 id="mmap">mmap</h4>
<p>mmap 把文件映射到进程的地址空间，提高了 I/O 的性能。</p>
<p>mmap 的优点有：</p>
<ul>
<li>减少系统调用。只需要一次 mmap() 系统调用，后续所有的调用像操作内存一样。</li>
<li>减少数据拷贝。mmap 只需要从磁盘拷贝一次，由于做过内存映射，不需要再拷贝回用户空间。</li>
<li>可靠性高。mmap 把数据写入页缓存后，跟缓存 I/O 的延迟写机制一样。</li>
</ul>
<p>存在的缺点：</p>
<ul>
<li>虚拟内存增大。Apk、Dex、so 都是通过 mmap 读取。mmap 会导致虚拟内存增大，mmap 大文件容易出现 OOM。</li>
<li>磁盘延迟。mmap 通过缺页中断向磁盘发起真正的磁盘 I/O，不能通过 mmap 消除磁盘 I/O 的延迟。</li>
</ul>
<p>在 Android 中可以将文件通过 <a href="https://developer.android.com/reference/android/os/MemoryFile">MemoryFile</a> 或者 <a href="https://developer.android.com/reference/java/nio/MappedByteBuffer">MappedByteBuffer</a> 映射到内存，然后进行读写，使用这种方式对于小文件和频繁读写操作的文件还是有一定优势的。</p>
<p>mmap 比较适合对同一块区域频繁读写的情况，推荐使用 I/O 线程来操作。用户日志、数据上报都满足这种场景，另外需要跨进程同步的时候，mmap 也是一个不错的选择。Android 跨进程通信有自己独有的 Binder 机制，它内部也是使用 mmap 实现。</p>
<h4 id="direct-io">Direct I/O</h4>
<p>一些数据库自己实现了数据和索引的缓存管理，对页缓存的依赖没那么强烈。它们想绕开页缓存机制，减少一次数据拷贝，它的数据也不会污染页缓存。</p>
<p>直接 I/O 访问文件方式减少了一次数据拷贝和一些系统调用的耗时，很大程度降低了 CPU 的使用率以及内存的占用。负面影响就是读写操作都是同步执行，导致应用程序等待。</p>
<h3 id="4-同步与异步-io">4. 同步与异步 I/O</h3>
<p>多线程阻塞式在 I/O 操作上的并没有优势，I/O 操作的主要瓶颈在于磁盘带宽。所以 I/O 操作不能开大量的线程。</p>
<p>NIO 是非阻塞 I/O，将 I/O 以事件的方式通知，可以减少线程切换的开销。NIO 的最大作用不是减少读取文件的耗时，而是最大化提升应用整体的 CPU 利用率。</p>
<p>另外，非常推荐 Square 的 <a href="https://github.com/square/okio">Okio</a>，它支持同步和异步 I/O，也做了比较多的优化。</p>
<p>I/O 优化对提升应用的体验非常有用，希望上面所讲的内容对你有帮助。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每周 ARTS 第 9 期]]></title>
        <id>https://isuperqiang.cn/post/mei-zhou-arts-di-9-qi</id>
        <link href="https://isuperqiang.cn/post/mei-zhou-arts-di-9-qi">
        </link>
        <updated>2019-06-02T03:37:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-algorithm">1. Algorithm</h2>
<h3 id="268-缺失数字简单">268. 缺失数字（简单）</h3>
<h5 id="描述">描述：</h5>
<blockquote>
<p>给定一个包含 0, 1, 2, ..., n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。</p>
</blockquote>
<h5 id="示例">示例：</h5>
<pre><code>输入: [3,0,1]
输出: 2
</code></pre>
<h5 id="思路">思路：</h5>
<blockquote>
<ul>
<li>解法一：用完整数组的元素之和减去当前数组的元素之和就可以了。</li>
<li>解法二：异或操作，eg: b^a^b=a; 相同的数字互相抵消，剩下的数值就是结果</li>
</ul>
</blockquote>
<h5 id="解法">解法：</h5>
<pre><code class="language-java">class Solution {
    public int missingNumber1(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int numSum = 0;
        int allSum = nums.length;
        for (int i = 0; i &lt; nums.length; i++) {
            numSum += nums[i];
            allSum += i;
        }
        return allSum - numSum;
    }

    public int missingNumber2(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int result = nums.length;
        for (int i = 0; i &lt; nums.length; i++) {
            result ^= nums[i];
            result ^= i;
        }
        return result;
    }
}
</code></pre>
<h5 id="分析">分析：</h5>
<ul>
<li>解法一和解法二一样：时间复杂度：O(n)，空间复杂度：O(1)</li>
</ul>
<hr>
<h3 id="203-移除链表元素简单">203. 移除链表元素（简单）</h3>
<h5 id="描述-2">描述：</h5>
<blockquote>
<p>删除链表中等于给定值 val 的所有节点。</p>
</blockquote>
<h5 id="示例-2">示例：</h5>
<pre><code>输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6
输出: 1-&gt;2-&gt;3-&gt;4-&gt;5
</code></pre>
<h5 id="思路-2">思路：</h5>
<blockquote>
<ul>
<li>解法一：首先检查头结点，如果结点值与val相等，那么把头指针后移；然后遍历链表，如果当前结点值与val相等，那么将前一个结点的指针指向后一个结点。</li>
<li>解法二：递归。</li>
</ul>
</blockquote>
<h5 id="解法-2">解法：</h5>
<pre><code class="language-java">class Solution {
    public ListNode removeElements(ListNode head, int val) {
        if (head == null) {
            return null;
        }
        while (head != null &amp;&amp; head.val == val) {
            head = head.next;
        }
        ListNode curr = head;
        ListNode prev = curr;
        while (curr != null) {
            if (curr.val == val) {
                prev.next = curr.next;
            } else {
                prev = curr;
            }
            curr = curr.next;
        }
        return head;
    }

    public ListNode removeElementsRecursive(ListNode head, int val) {
        if (head == null) {
            return null;
        }
        head.next = removeElementsRecursive(head.next, val);
        return head.val == val ? head.next : head;
    }
}
</code></pre>
<h5 id="分析-2">分析：</h5>
<ul>
<li>时间复杂度：O(n)，空间复杂度：O(1)</li>
</ul>
<h2 id="2-review">2. Review</h2>
<p><a href="https://hackernoon.com/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0">50+ Data Structure and Algorithms Interview Questions for Programmers</a> 50个数据结构和算法面试题</p>
<p>作者主要介绍了面试中常见的算法题，大多关于数组、链表、字符串、二叉树，还有其他等。</p>
<ul>
<li>数组是最基本的线性数据结构，使用连续的存储空间。随机访问元素的时间复杂度 O(1)，添加和移除元素的时间复杂度是 O(n)。常见的题目有：数组反转、数据排序等。</li>
<li>链表也是一种线性数据结构，通过结点的指针连接，存储空间不连续。添加和移除元素的时间复杂度是 O(1)，查找元素的时间复杂度是 O(n)。解决链表问题不要忘记递归的思想。</li>
<li>字符串的问题也很常见，String 本质上就是字符数组，可以采用基于数组的解法。</li>
<li>树是一种有层次的数据结构，解决二叉树问题的关键是树的理论知识。比如：树的深度、大小、叶子结点，还有前序遍历、中序遍历、后序遍历。</li>
<li>其他的问题，比如算法、设计、位运算、逻辑题等，</li>
</ul>
<h2 id="3-tip">3. Tip</h2>
<p>重新复习了 Gradle 构建的知识。Gradle 构建就是围绕 Project 和 Task 展开的，Project 可以理解要构建的模块，Task 则是要执行的任务。Gradle 构建要经历初始化、配置和执行的过程，Task 之间存在依赖关系，开发者可以自由配置 Task，灵活性非常好。另外，Groovy 是基于 JVM 的语言，可以和 Java 兼容，语法和 Python 类似，封装了很多常用的 API，特别适合写脚本。</p>
<h2 id="4-share">4. Share</h2>
<p><a href="https://www.zhihu.com/question/312019918">作为 IT 行业的过来人，你有什么话想对后辈说的？</a></p>
<p>从老一代 IT 人的经历中，得到一些发展和行为的启示。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每周 ARTS 第 8 期]]></title>
        <id>https://isuperqiang.cn/post/mei-zhou-arts-di-8-qi</id>
        <link href="https://isuperqiang.cn/post/mei-zhou-arts-di-8-qi">
        </link>
        <updated>2019-05-26T03:36:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-algorithm">1. Algorithm</h2>
<h3 id="101-对称二叉树简单">101. 对称二叉树（简单）</h3>
<h5 id="描述">描述：</h5>
<blockquote>
<p>给定一个二叉树，检查它是否是镜像对称的。</p>
</blockquote>
<h5 id="示例">示例：</h5>
<pre><code>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。
         1
       /   \
      2     2
     / \   /  \
    3   4 4    3
</code></pre>
<h5 id="思路">思路：</h5>
<blockquote>
<ul>
<li>递归法：如果同时满足下面的条件，两个树互为镜像：它们的两个根结点具有相同的值；每个树的右子树都与另一个树的左子树镜像对称。</li>
<li>迭代法：类似广度优先遍历，但要把队列存的值 Double 一下。每次提取两个结点并比较它们的值。然后将两个结点的左右子结点按相反的顺序插入队列中。当队列为空时，或者我们检测到树不对称（即从队列中取出两个不相等的连续结点）时，算法结束。</li>
</ul>
</blockquote>
<h5 id="解法">解法：</h5>
<pre><code class="language-java">class Solution {
      // 迭代法
    public boolean isSymmetric2(TreeNode root) {
        if (root == null) {
            return true;
        }

        Queue&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();
        q.add(root);
        q.add(root);
        while (q.size() &gt; 0) {
            TreeNode left = q.poll();
            TreeNode right = q.poll();
            if (left == null &amp;&amp; right == null) {
                continue;
            }
            if (left == null || right == null) {
                return false;
            }
            if (left.val != right.val) {
                return false;
            }
            q.add(left.left);
            q.add(right.right);
            q.add(left.right);
            q.add(right.left);
        }
        return true;
    }

    // 递归法
    public boolean isSymmetric(TreeNode root) {
        if (root == null) {
            return true;
        }
        return isMirror(root.left, root.right);
    }

    private boolean isMirror(TreeNode left, TreeNode right) {
        if (left == null &amp;&amp; right == null) {
            return true;
        }

        if (left == null || right == null) {
            return false;
        }

        if (left.val == right.val) {
            return isMirror(left.left, right.right) &amp;&amp; isMirror(left.right, right.left);
        }
        return false;
    }
}
</code></pre>
<h5 id="分析">分析：</h5>
<ul>
<li>递归法：时间复杂度：O(n)，空间复杂度：O(n)</li>
<li>迭代法：时间复杂度：O(n)，空间复杂度：O(n)</li>
</ul>
<hr>
<h3 id="107-二叉树的层次遍历-ii简单">107. 二叉树的层次遍历 II（简单）</h3>
<h5 id="描述-2">描述：</h5>
<blockquote>
<p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>
</blockquote>
<h5 id="示例-2">示例：</h5>
<pre><code>例如，给定二叉树 [3,9,20,null,null,15,7],
     3
   /   \
  9    20
 / \
15  7
返回其自底向上的层次遍历为：
[
  [15,7],
  [9,20],
  [3]
]
</code></pre>
<h5 id="思路-2">思路：</h5>
<blockquote>
<p>广度优先，逐层遍历。首先构建数据列表和下层结点列表，遍历当前层的结点列表，把数据添加到数据列表，并把每个结点的子结点添加到下层结点列表。遍历完成后，把数据列表放到结果列表的首部，然后把下层结点列表变成当前结点列表，继续遍历。</p>
</blockquote>
<h5 id="解法-2">解法：</h5>
<pre><code class="language-java">class Solution {
    public List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) {
        if (root == null) {
            return Collections.emptyList();
        }

        List&lt;List&lt;Integer&gt;&gt; result = new LinkedList&lt;&gt;();
        List&lt;TreeNode&gt; currRowList = new LinkedList&lt;&gt;();
        currRowList.add(root);
        List&lt;TreeNode&gt; nextRowList;
        List&lt;Integer&gt; valueList;
        while (currRowList.size() &gt; 0) {
            valueList = new LinkedList&lt;&gt;();
            nextRowList = new LinkedList&lt;&gt;();
            for (TreeNode treeNode : currRowList) {
                valueList.add(treeNode.val);
                if (treeNode.left != null) {
                    nextRowList.add(treeNode.left);
                }
                if (treeNode.right != null) {
                    nextRowList.add(treeNode.right);
                }
            }
            result.add(0, valueList);
            currRowList = nextRowList;
        }
        return result;
    }
}
</code></pre>
<h5 id="分析-2">分析：</h5>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(n)</li>
</ul>
<h2 id="2-review">2. Review</h2>
<p><a href="https://medium.freecodecamp.org/writing-a-killer-software-engineering-resume-b11c91ef699d">How to write a killer Software Engineering résumé</a> 软件工程师如何写出杀手级的简历</p>
<p>作者是位面霸，他凭简历获得了 Google、Facebook、Amazon 等公司的面试机会。文章讲述了杀手级简历的特征，以及如何写出更好更高效的简历。</p>
<p>如何写出杀手级的简历？这里有几点建议：</p>
<ul>
<li>一眼就要看到的信息：你是谁，联系方式，教育经历，工作经历，项目经历，专业技能。</li>
<li>内容一两页就够了，排版格式简单明了。</li>
<li>让 HR 省事、舒心，自然就给你机会。</li>
<li>个人经历要和职位相关，按照最近时间排列。</li>
<li>简历不是通用的，每个职位都要有不同的版本。</li>
<li>描述工作成果：Accomplished [X] as measured by [Y] by doing [Z]。</li>
<li>个人项目很重要，体现了对编程的热爱和追求。</li>
<li>专业技能，精通、熟悉、了解 XXX。</li>
</ul>
<h2 id="3-tip">3. Tip</h2>
<p>每个开发者都该有一套自己的代码工具箱，用来收集日常开发用到的工具类，为的是能够在项目中快速集成和使用， 从而缩短开发周期，提高编码效率，节约时间成本。我自己就整理了一套 Android 开发的常用代码库，有需要时直接拿来使用，简单省事。</p>
<h2 id="4-share">4. Share</h2>
<p><a href="https://mp.weixin.qq.com/s/9ZU8aovjazSPdrQoNhIkqg">努力成为一名‘‘值得跟’’的Leader</a></p>
<p>什么样的人才是一个好的 Leader？“<strong>值得跟</strong>”绝对是对一个 Leader 最高的赞扬。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[散列表（下）：为什么散列表和链表经常会一起使用]]></title>
        <id>https://isuperqiang.cn/post/san-lie-biao-xia-wei-shi-me-san-lie-biao-he-lian-biao-jing-chang-hui-yi-qi-shi-yong</id>
        <link href="https://isuperqiang.cn/post/san-lie-biao-xia-wei-shi-me-san-lie-biao-he-lian-biao-jing-chang-hui-yi-qi-shi-yong">
        </link>
        <updated>2019-05-24T09:11:25.000Z</updated>
        <content type="html"><![CDATA[<p>散列表虽然支持高效的数据插入、删除和查找操作，但是其中的数据都是通过散列函数打乱之后无规律的。也就是说，它无法按照某种顺序快速地遍历。如果想有序遍历散列表中的数据，那就需要将数据拷贝到数组中，然后排序再遍历。</p>
<p>散列表是动态的数据结构，不停地进行数据的插入、删除，当我们想按顺序遍历散列表时，都需要先排序，这样效率会很低。为了解决这个问题，就将散列表和链表（或者跳表）结合在一起使用。</p>
<p>常见的使用场景：</p>
<ul>
<li>LRU 缓存淘汰算法可以用链表和散列表实现；</li>
<li>Redis 有序集合用到了跳表和散列表；</li>
<li>Java 的 LinkedHashMap 也用到了散列表和链表。</li>
</ul>
<h3 id="1-lru-缓存淘汰算法">1. LRU 缓存淘汰算法</h3>
<p>实际上，一个缓存（cache）系统主要包含下面这几个操作：</p>
<ul>
<li>往缓存中添加一个数据；</li>
<li>从缓存中删除一个数据；</li>
<li>在缓存中查找一个数据。</li>
</ul>
<p>上面三个操作都涉及查找操作，如果单纯地用链表，查找的时间复杂度是 O(n)。如果用散列表和链表，时间复杂度变为 O(1)。</p>
<p>使用双向链表存储数据，链表中的每个结点除了存储数据（data）、前驱指针（prev）、后继指针（next）之外，还新增了一个特殊的字段 hnext。</p>
<pre><code>prev|data|next|hnext
</code></pre>
<p>每个结点会在两条链中。一个链是双向链表，另一个链是散列表中的拉链。前驱和后继指针是为了将结点串在双向链表中，hnext 指针是为了将结点串在散列表的拉链中。</p>
<p>整个过程涉及的查找操作都可以通过散列表来完成。其他的操作，比如删除头结点、链表尾部插入数据等，都可以在 O(1) 的时间复杂度内完成。所以，这三个操作的时间复杂度都是 O(1)。</p>
<h3 id="2-redis-有序集合">2. Redis 有序集合</h3>
<p>实际上，在有序集合中，每个成员对象有两个重要的属性，key（键值）和score（分值）。不仅会通过 score 来查找数据，还会通过 key 来查找数据。</p>
<p>如果细化一下 Redis 有序集合的操作，那就是下面这样：</p>
<ul>
<li>添加一个成员对象；</li>
<li>按照键值来删除一个成员对象；</li>
<li>按照键值来查找一个成员对象；</li>
<li>按照分值区间查找数据，比如查找积分在 [100, 356] 之间的成员对象；</li>
<li>按照分值从小到大排序成员变量；</li>
</ul>
<p>如果仅仅按照分值将成员对象组织成跳表的结构，那么按照键值来删除、查询成员对象就会很慢。这时可以再按照键值构建一个散列表，按照 key 来删除、查找一个成员对象的时间复杂度就变成了 O(1)。</p>
<h3 id="3-java-linkedhashmap">3. Java LinkedHashMap</h3>
<p>LinkedHashMap 是通过双向链表和散列表这两种数据结构组合实现的。LinkedHashMap 中的“Linked”实际上是指的是双向链表，并非指用链表法解决散列冲突。</p>
<p>按照访问时间排序的 LinkedHashMap 本身就是一个支持 LRU 缓存淘汰策略的缓存系统。实际上，它们两个的实现原理也是一模一样。</p>
<h3 id="课后思考">课后思考</h3>
<p>今天讲的几个散列表和链表结合使用的例子里，用的都是双向链表。如果把双向链表改成单链表，还能否正常工作呢？为什么呢？</p>
<p>其实，依然能够工作。但是，插入和删除的时候，需要查找前驱指针，时间复杂度 O(n)。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每周 ARTS 第 7 期]]></title>
        <id>https://isuperqiang.cn/post/mei-zhou-arts-di-7-qi</id>
        <link href="https://isuperqiang.cn/post/mei-zhou-arts-di-7-qi">
        </link>
        <updated>2019-05-19T03:35:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-algorithm">1. Algorithm</h2>
<h3 id="141-环形链表简单">141. 环形链表（简单）</h3>
<h5 id="描述">描述：</h5>
<blockquote>
<p>给定一个链表，判断链表中是否有环。</p>
</blockquote>
<h5 id="示例">示例：</h5>
<pre><code class="language-properties">输入: [3,2,0,4,2]
输出: true
</code></pre>
<h5 id="思路">思路：</h5>
<blockquote>
<p>使用快慢指针，慢指针每次移动一步，而快指针每次移动两步。如果存在环，那么两指针必定相遇。</p>
</blockquote>
<h5 id="解法">解法：</h5>
<pre><code class="language-java">class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null) {
            return false;
        }

        ListNode slow = head;
        ListNode fast = head;
        while (fast != null &amp;&amp; fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                return true;
            }
        }
        return false;
    }
}
</code></pre>
<h5 id="分析">分析：</h5>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(1)</li>
</ul>
<hr>
<h3 id="172-阶乘后的零简单">172. 阶乘后的零（简单）</h3>
<h5 id="描述-2">描述：</h5>
<blockquote>
<p>给定一个整数 <em>n</em>，返回 <em>n</em>! 结果尾数中零的数量。</p>
</blockquote>
<h5 id="示例-2">示例：</h5>
<pre><code class="language-properties">输入: 5
输出: 1
解释: 5! = 120, 尾数中有 1 个
</code></pre>
<h5 id="思路-2">思路：</h5>
<blockquote>
<p>只有 2 * 5 末尾才有零，乘数中 2 的个数肯定比 5 多。n! 为递减阶乘，只要统计乘数里因子 5 的个数就行了。</p>
</blockquote>
<h5 id="解法-2">解法：</h5>
<pre><code class="language-java">class Solution {
    // 递归法
    public int trailingZeroes1(int n) {
        if (n &lt; 5) {
            return 0;
        } else {
            return n / 5 + trailingZeroes1(n / 5);
        }
    }

    // 迭代法
    public int trailingZeroes2(int n) {
        int count = 0;
        while (n &gt;= 5) {
            count += n / 5;
            n /= 5;
        }
        return count;
    }
}
</code></pre>
<h5 id="分析-2">分析：</h5>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h2 id="2-review">2. Review</h2>
<p><a href="https://medium.freecodecamp.org/ace-your-first-year-as-a-junior-developer-with-this-advice-bbc68b6fe2d9">Ace your first year as a junior developer with this advice</a> 初级开发者赢得首年的建议</p>
<p>文章主要从以下几个方面展开论述：</p>
<ul>
<li>知识有缺口不可怕，软件开发者就要不断学习。</li>
<li>有问题是好事，要积极寻求帮助。</li>
<li>代码审查是你的朋友，从中可以学到很多。</li>
<li>把大任务拆解成小任务，写下步骤会更加清晰。</li>
<li>保持简洁。三个步骤：走通、重构、优化。测试驱动开发（TDD）</li>
<li>学习如何写整洁代码。平庸的程序员写出机器理解的代码，优秀的程序员写出人类可读的代码。</li>
<li>你遇到的问题大部分都有答案，所以先去寻找答案吧。比如到 GitHub、StackOverflow 上。</li>
<li>学会如何读代码。关注设计模式、方法类变量的命名、注释的使用、测试的使用。</li>
</ul>
<h2 id="3-tip">3. Tip</h2>
<p>这周末学习了 Dagger2 依赖注入框架，在 Android 开发中经常被使用。原理是这样的，它在编译阶段通过注解处理器扫描代码中的注解，然后自动生成辅助代码，简化了依赖注入的步骤，而且不会对性能产生任何影响。</p>
<h2 id="4-share">4. Share</h2>
<p><a href="https://mp.weixin.qq.com/s/M1E_UrkCQ3PNnGsyqpKc1A">从程序员到架构师 - 技能篇</a></p>
<p>架构师只是功底深厚的程序员。程序员从初级、中级、高级再到架构师，是一个不断经验积累的过程。在程序员生涯中，除了技术实力以外，其它软实力也不容忽视。如：主动学习、积累经验、控制注意力、超越自我。</p>
]]></content>
    </entry>
</feed>